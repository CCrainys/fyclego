menu "Lego Processor Component Configurations"

config COMP_PROCESSOR
	bool "Configure Lego as processor component"
	default n
	---help---
	  Say Y if you are going to build a processor-component
	  controller of Lego OS.

if COMP_PROCESSOR

config CHECKPOINT
	bool "Enable checkpoint feature"
	default n
	---help---
	  Say Y if you want periodic checkpointing at processor component.
	  This may slow down application throughput, but could greatly improve
	  the reliability of your system.

	  If unsure, say N.

config MEMMAP_MEMBLOCK_RESERVED
	bool "Reseve memmap $ marked memory to memblock"
	default y
	help
	  By default, memmap $ option reserves a range of physical memory.
	  This reserved memory will be marked reserved in e820 table, which
	  means this range will not be registered into memblock.

	  Only memory that has been registered into memblock will be assigned
	  `struct page' with it (both memblock.memory and memblock.reserver will have).
	  Do note that this part of memory can be mapped as 1GB page (depends on boot time).

	  In other words, by default (the linux semantic), users need to ioremap
	  the memmap $ reserved physical memory, and use the returned kernel virtual address.
	  Do note that the ioremap() currently in Lego only support 4KB mapping.

	  If this option is enabled, the memory marked by memmap $ will NOT be marked
	  reserved in e820 table, instead, it will be pushed into memblock, which means
	  it is mapped into kernel direct mapping and has `struct page'.

	  So, why we are having this?
	  Because I think the direct 1GB mapping may have better performance.
	  However, the real performance number is unknown.

	  If unsure, say y.

source "managers/processor/pcache/Kconfig"
source "managers/processor/fs/Kconfig"
source "managers/processor/checkpoint/Kconfig"

menu "Processor DEBUG Options"
config DEBUG_PCACHE
	bool "Debug pcache"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  This will enable PCACHE_BUG_ON macro etc. Enable this if you
	  are developing pcache subsystem.

	  If unsure, say N.

config DEBUG_PCACHE_FILL
	bool "Debug pcache fill"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	depends on DEBUG_PCACHE
	help
	  Enable to have a detailed dump log of pcache llc miss activities.
	  It basically tells you what lines are fetched from remote. This
	  option may produce *a lot* messages, hence by default it is
	  ratelimited.

	  If unsure, say N

config DEBUG_PCACHE_FILL_UNLIMITED
	bool "Debug pcache fill, print message un-ratelimited"
	default n
	depends on DEBUG_PCACHE_FILL
	help
	  Enable to have un-ratelimited pcache_debug in cache fill path.
	  This indeed will produce a lot messages.

	  If ununsure, say N please.

config DEBUG_PCACHE_FLUSH
	bool "Debug pcache flush"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	depends on DEBUG_PCACHE
	help
	  Enable to have a detailed dump log of pcache flush activities.
	  It basically tells you what lines are flushed, and where they
	  flushed to.

	  If unsure, say N

config DEBUG_PCACHE_VICTIM
	bool "Debug victim cache"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	depends on DEBUG_PCACHE
	depends on PCACHE_EVICTION_VICTIM
	help
	  Enable this option to have some runtime debug info about victim
	  cache. If unsure, say N.

config DEBUG_FORK
	bool "Debug processor-to-memory fork()"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  Enable to debug fork syscall.

	  If unsure, say N.

config DEBUG_FILE
	bool "Debug open/read/close calls"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  Enable to debug file related calls

	  If unsure, say N.

config DEBUG_SYSCALL
	bool "Debug all SYSCALL enter/exit"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  Enable to have a detailed dump log of syscall entering and exit.
	  Only used for testing purpose.

	  If unsure, say N.

config DEBUG_MMAP
	bool "Debug mmap related syscalls"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  Enable to debug mmap(), brk(), munmap(), mremap() syscalls
	  in processor side. Mostly, it tells you what is returned.

	  If unsure, say N.

config DEBUG_PROC_SYS
	bool "Debug /proc and /sys output"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  Some user-program will open /proc and /sys files to get information
	  about lego-kernel. We are having these two interfaces to maintain
	  compatability with linux.

	  Enable to print the msg everytime /proc and /sys files are read
	  by user program.

	  If unsure, say N.

config DEBUG_EMULATED_PGTABLE
	bool "Debug emulated pgtable release (may have tons of messages)"
	default n
	depends on COMP_PROCESSOR
	depends on DEBUG_KERNEL
	help
	  Enable to trace the emulated pgtable release function, which is
	  normally invoked by munmap() and mremap().

	  If unsure, say N.

config DEBUG_CHECKPOINT
	bool "Enable to show checkpoint debug messages"
	default n
	depends on DEBUG_KERNEL
	---help---
	  Say Y if you want to have more info about what is going on about checkpoint.

	  If unsure, say N.

endmenu # "Debug Option"

endif	# if COMP_PROCESSOR

endmenu # Processor component
